// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpringOnion.Data;

#nullable disable

namespace SpringOnion.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SpringOnion.Data.Entities.Attachment", b =>
                {
                    b.Property<string>("AttachmentId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttachmentId");

                    b.HasIndex("Hash");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Conversation", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastActivityUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("ConversationId");

                    b.HasIndex("LastActivityUtc");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.ConversationParticipant", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("ConversationId", "UserId");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("CipherText")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("SortId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("SentAtUtc");

                    b.HasIndex("ConversationId", "SortId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("DisplayName");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Attachment", b =>
                {
                    b.HasOne("SpringOnion.Data.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.ConversationParticipant", b =>
                {
                    b.HasOne("SpringOnion.Data.Entities.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Message", b =>
                {
                    b.HasOne("SpringOnion.Data.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SpringOnion.Data.Entities.Message", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
